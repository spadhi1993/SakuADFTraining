{
	"name": "Group2_ATI_Sync_EntitiesToSQL",
	"properties": {
		"description": "Sync ATI Dynamic 365 Entities data on SQL database tables for Group 2",
		"activities": [
			{
				"name": "Get_Entity_List",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "SqlServerSource",
						"sqlReaderQuery": "SELECT Id, GroupID, SourceTableName, TargetTableName, PrimaryKey, [TYPE], WatermarkColumn, WatermarkValue, AttributesJSON, IsActive\nFROM [ADF_D365_Entity_Mapping]\nWHERE GroupID = 2 AND IsActive = 1",
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "ForEach_Entity_Copy_Data",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "Get_Entity_List",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('Get_Entity_List').output.value",
						"type": "Expression"
					},
					"isSequential": true,
					"activities": [
						{
							"name": "Is_Incremental_Data_Load",
							"type": "IfCondition",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"expression": {
									"value": "@pipeline().parameters.IsIncremental",
									"type": "Expression"
								},
								"ifFalseActivities": [
									{
										"name": "Copy_D365_Entitiy_Data_To_SQL_Table",
										"type": "Copy",
										"dependsOn": [],
										"policy": {
											"timeout": "0.12:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"source": {
												"type": "DynamicsSource"
											},
											"sink": {
												"type": "SqlServerSink",
												"writeBehavior": "upsert",
												"upsertSettings": {
													"useTempDB": true,
													"keys": {
														"value": "@array(item().PrimaryKey)",
														"type": "Expression"
													}
												},
												"sqlWriterUseTableLock": true,
												"tableOption": "autoCreate"
											},
											"enableStaging": false
										}
									}
								],
								"ifTrueActivities": [
									{
										"name": "Copy_D365_Entitiy_Data_To_SQL_Table_Incremental",
										"type": "Copy",
										"dependsOn": [
											{
												"activity": "Set StartTime",
												"dependencyConditions": [
													"Succeeded"
												]
											},
											{
												"activity": "Get Dynamic Column Mapping",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"policy": {
											"timeout": "0.12:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"source": {
												"type": "DynamicsSource",
												"query": {
													"value": "<fetch>\n<entity name=\"appointment\">\n    <attribute name=\"activityid\" />\n    <attribute name=\"regardingobjecttypecode\" />\n    <attribute name=\"activitytypecode\" />\n    <attribute name=\"regardingobjectid\" />\n    <filter type=\"and\">\n      <condition attribute =\"regardingobjecttypecode\" operator=\"eq\" value =\"1\"/>\n    </filter>\n    </entity>\n</fetch>\n",
													"type": "Expression"
												}
											},
											"sink": {
												"type": "SqlServerSink",
												"writeBehavior": "upsert",
												"upsertSettings": {
													"useTempDB": true,
													"keys": {
														"value": "@array(item().PrimaryKey)",
														"type": "Expression"
													}
												},
												"sqlWriterUseTableLock": true
											},
											"enableStaging": false,
											"enableSkipIncompatibleRow": false,
											"translator": {
												"value": "@json(activity('Get Dynamic Column Mapping').output.firstRow.jsonmapping)",
												"type": "Expression"
											}
										}
									},
									{
										"name": "Set StartTime",
										"description": "Duration start time for D365 entity data incremental fetch",
										"type": "SetVariable",
										"dependsOn": [],
										"userProperties": [],
										"typeProperties": {
											"variableName": "StartTime",
											"value": {
												"value": "@formatDateTime(convertFromUtc(addDays(utcNow(), -2), 'Pacific Standard Time'),'yyyy-MM-dd hh:mm:ssz')",
												"type": "Expression"
											}
										}
									},
									{
										"name": "Web Get Entity CRM Schema",
										"type": "WebActivity",
										"dependsOn": [],
										"policy": {
											"timeout": "0.12:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"url": {
												"value": "@concat('https://atiprd.crm.dynamics.com/api/data/v9.2/EntityDefinitions(LogicalName=''',item().SourceTableName,''')/Attributes?$select=SchemaName,AttributeType')",
												"type": "Expression"
											},
											"method": "GET",
											"authentication": {
												"type": "ServicePrincipal",
												"userTenant": "d52d0834-97c6-45cc-a07e-07ded8eeec67",
												"username": "4000d91f-a997-4005-89d8-2199c1834b6d",
												"resource": "https://atiprd.crm.dynamics.com",
												"password": {
													"type": "SecureString",
													"value": "**********"
												}
											}
										}
									},
									{
										"name": "Execute DML Script",
										"type": "Script",
										"dependsOn": [
											{
												"activity": "Set CRM Entity Schema",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"policy": {
											"timeout": "0.12:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"scripts": [
												{
													"type": "NonQuery",
													"text": {
														"value": "Declare @entity nvarchar(100) = '@{item().TargetTableName}';\nDeclare @attributes nvarchar(max) = replace('@{variables('CRMEntitySchema')}','odata.type','odatatype');\ndeclare @metadata table (Name nvarchar(200), datatype NVARCHAR(100), attributetype NVARCHAR(50),datatypeSQL nvarchar(100));\ninsert into @metadata\nselect x.Name, x.datatype, \nx.attributetype,\ncase\nwhen x.attributetype = 'lookup' then 'uniqueidentifier'\nwhen x.attributetype = 'bigint' then 'bigint'\nwhen x.attributetype = 'boolean' then 'bit'\nwhen x.attributetype = 'datetime' then 'datetime2(7)'\nwhen x.attributetype = 'decimal' then 'decimal(38, 18)'\nwhen x.attributetype = 'double' then 'float'\nwhen x.attributetype = 'entityname' then 'nvarchar(max)'\nwhen x.attributetype = 'integer' then 'int'\nwhen x.attributetype = 'memo' then 'nvarchar(max)'\nwhen x.attributetype = 'money' then 'decimal(38, 18)'\nwhen x.attributetype = 'picklist' then 'int'\nwhen x.attributetype = 'state' then 'int'\nwhen x.attributetype = 'status' then 'int'\nwhen x.attributetype = 'string' then 'nvarchar(max)'\nwhen x.attributetype = 'uniqueidentifier' then 'uniqueidentifier'\nelse x.attributetype end as datatypeSQL_Type\nfrom\n(select Name, datatype, attributetype   \n FROM OPENJSON(@attributes)  WITH (\n Name nvarchar(200) '$.schemaname',  \n datatype NVARCHAR(100) '$.odatatype',\n attributetype NVARCHAR(50) '$.attributetype'\n )) x;\n\nINSERT INTO Capture_Attribute_Altered_List(EntityName, AttributeName, DataType) \nSELECT @entity , [name] , datatypeSQL \nFROM @metadata m\nLEFT JOIN INFORMATION_SCHEMA.COLUMNS c \nON c.TABLE_NAME = @entity and TABLE_SCHEMA = 'dbo'\nAND c.COLUMN_NAME = m.[Name]\nWHERE c.COLUMN_NAME IS NULL \nAND m.attributetype NOT IN ('virtual','partylist');\n\n  -- add Columns\nDeclare @AlterTableAddColumnDDL nvarchar(max) = (SELECT \n'alter table ' + @entity + ' ADD ' + STRING_AGG(CONVERT(NVARCHAR(max), + '[' + name + '] ' +  datatypeSQL), ',')\nfrom @metadata m\nleft join  INFORMATION_SCHEMA.COLUMNS c on \nc.TABLE_NAME = @entity and TABLE_SCHEMA = 'dbo'\nand c.COLUMN_NAME = m.Name\nwhere c.COLUMN_NAME is null and m.attributetype not in ('virtual','partylist'));\n\nexecute sp_executesql @AlterTableAddColumnDDL;",
														"type": "Expression"
													}
												}
											],
											"scriptBlockExecutionTimeout": "02:00:00"
										}
									},
									{
										"name": "Set CRM Entity Schema",
										"type": "SetVariable",
										"dependsOn": [
											{
												"activity": "Web Get Entity CRM Schema",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"userProperties": [],
										"typeProperties": {
											"variableName": "CRMEntitySchema",
											"value": {
												"value": "@toLower(string(activity('Web Get Entity CRM Schema').output.value))",
												"type": "Expression"
											}
										}
									},
									{
										"name": "Get Dynamic Column Mapping",
										"type": "Lookup",
										"dependsOn": [
											{
												"activity": "Execute DML Script",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"policy": {
											"timeout": "0.12:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"source": {
												"type": "SqlServerSource",
												"sqlReaderQuery": {
													"value": "Declare @entity nvarchar(100) = '@{item().TargetTableName}';\nDECLARE @temptable TABLE ( [ADFTypeMappingID] int, [ADFTypeDataType] varchar(20), [SQLServerDataType] varchar(20) );\nINSERT INTO @temptable ([ADFTypeMappingID], [ADFTypeDataType], [SQLServerDataType])\nVALUES\n( 1, 'Int64', 'BIGINT' ), \n( 2, 'Byte array', 'BINARY' ), \n( 3, 'Boolean', 'BIT' ), \n( 4, 'String', 'CHAR' ), \n( 5, 'DateTime', 'DATE' ), \n( 6, 'DateTime', 'DATETIME' ), \n( 7, 'DateTime', 'DATETIME2' ), \n( 8, 'DateTimeOffset', 'DATETIMEOFFSET' ), \n( 9, 'Decimal', 'DECIMAL' ), \n( 10, 'Double', 'FLOAT' ), \n( 11, 'Byte array', 'IMAGE' ), \n( 12, 'Int32', 'INT' ), \n( 13, 'Decimal', 'MONEY' ), \n( 14, 'String', 'NCHAR' ), \n( 15, 'String', 'NTEXT' ), \n( 16, 'Decimal', 'NUMERIC' ), \n( 17, 'String', 'NVARCHAR' ), \n( 18, 'Single', 'REAL' ), \n( 19, 'Byte array', 'ROWVERSION' ), \n( 20, 'DateTime', 'SMALLDATETIME' ), \n( 21, 'Int16', 'SMALLINT' ), \n( 22, 'Decimal', 'SMALLMONEY' ), \n( 23, 'Byte array', 'SQL_VARIANT' ), \n( 24, 'String', 'TEXT' ), \n( 25, 'DateTime', 'TIME' ), \n( 26, 'String', 'TIMESTAMP' ), \n( 27, 'Int16', 'TINYINT' ), \n( 28, 'Guid', 'UNIQUEIDENTIFIER' ), \n( 29, 'Byte array', 'VARBINARY' ), \n( 30, 'String', 'VARCHAR' ), \n( 31, 'String', 'XML' ), \n( 32, 'String', 'JSON' );\n\nSELECT jsonmapping = '{\"type\": \"TabularTranslator\", \"mappings\": ' + \n(\n    SELECT\n        'source.name'  = c.[name]\n        ,'source.type'  = m.ADFTypeDataType\n        ,'sink.name'    = c.[name]\n       ,'sink.type'    = m.ADFTypeDataType\n    FROM sys.tables                 t\n    JOIN sys.schemas                s ON s.schema_id        = t.schema_id\n    JOIN sys.all_columns            c ON c.object_id        = t.object_id\n    JOIN sys.types                  y ON c.system_type_id   = y.system_type_id\n                                        AND c.user_type_id  = y.user_type_id\n    JOIN @temptable m ON y.[name] = m.SQLServerDataType\n    WHERE   1 = 1\n        AND t.[name] = @entity\n        AND s.[name] = 'dbo'\n        AND c.[name] <> 'SRC_TIMESTAMP'\n    ORDER BY c.column_id\n    FOR JSON PATH\n) + '}';",
													"type": "Expression"
												},
												"queryTimeout": "02:00:00",
												"partitionOption": "None"
											}
										}
									}
								]
							}
						}
					]
				}
			}
		],
		"parameters": {
			"IsIncremental": {
				"type": "bool",
				"defaultValue": true
			}
		},
		"variables": {
			"test": {
				"type": "String"
			},
			"StartTime": {
				"type": "String"
			},
			"CRMEntitySchema": {
				"type": "String"
			}
		},
		"folder": {
			"name": "Dynamic365-SQL/ATI-Pipelines"
		},
		"annotations": [],
		"lastPublishTime": "2023-01-23T08:56:50Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}
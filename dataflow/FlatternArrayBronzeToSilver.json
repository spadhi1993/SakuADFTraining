{
	"name": "FlatternArrayBronzeToSilver",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "SRC_Latest_Json",
						"type": "DatasetReference"
					},
					"name": "srcdlbronze"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SINK_DL_Silver_Parquet",
						"type": "DatasetReference"
					},
					"name": "sinkdlgold",
					"description": "Export data to silver folder in Parquet format in dl"
				}
			],
			"transformations": [
				{
					"name": "flattenvaluearray",
					"description": "Unrolling arrays from value to columns 'TESTDATA, TESTRESULT, _RecordID, Sys_PK, Sys_RowTitle, Sys_Version, Sys_VersionID, Sys_OriginCode, Sys_LoadBy, Sys_CommitDateUtc, Sys_FirstLoadBy, Sys_FirstCommitDateUtc, Sys_ID, Sys_BatchID, Sys_FirstBatchID'"
				}
			],
			"scriptLines": [
				"source(output(",
				"          {@odata.context} as string,",
				"          value as (TESTDATA as string, TESTRESULT as string, {_RecordID} as string, Sys_PK as integer, Sys_RowTitle as string, Sys_Version as integer, Sys_VersionID as string, Sys_OriginCode as string, Sys_LoadBy as string, Sys_CommitDateUtc as string, Sys_FirstLoadBy as string, Sys_FirstCommitDateUtc as string, Sys_ID as string, Sys_BatchID as integer, Sys_FirstBatchID as integer)[]",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: true,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine',",
				"     partitionBy('hash', 1)) ~> srcdlbronze",
				"srcdlbronze foldDown(unroll(value, value),",
				"     mapColumn(",
				"          TESTDATA = value.TESTDATA,",
				"          TESTRESULT = value.TESTRESULT,",
				"          {_RecordID} = value.{_RecordID},",
				"          Sys_PK = value.Sys_PK,",
				"          Sys_RowTitle = value.Sys_RowTitle,",
				"          Sys_Version = value.Sys_Version,",
				"          Sys_VersionID = value.Sys_VersionID,",
				"          Sys_OriginCode = value.Sys_OriginCode,",
				"          Sys_LoadBy = value.Sys_LoadBy,",
				"          Sys_CommitDateUtc = value.Sys_CommitDateUtc,",
				"          Sys_FirstLoadBy = value.Sys_FirstLoadBy,",
				"          Sys_FirstCommitDateUtc = value.Sys_FirstCommitDateUtc,",
				"          Sys_ID = value.Sys_ID,",
				"          Sys_BatchID = value.Sys_BatchID,",
				"          Sys_FirstBatchID = value.Sys_FirstBatchID",
				"     ),",
				"     partitionBy('hash', 1),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flattenvaluearray",
				"flattenvaluearray sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          {Province/State} as string,",
				"          {Country/Region} as string,",
				"          Lat as double,",
				"          Long as double,",
				"          UnpivotedDate as string,",
				"          CumulativeDeaths as integer,",
				"          Date as date,",
				"          DailyDeaths as integer",
				"     ),",
				"     format: 'parquet',",
				"     partitionFileNames:['test.parquet'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1),",
				"     preCommands: [],",
				"     postCommands: []) ~> sinkdlgold"
			]
		}
	}
}